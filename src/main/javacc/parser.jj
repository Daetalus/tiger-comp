options{
    STATIC=false;
}

PARSER_BEGIN(Parser)

package  javacc;
import ast.Ast.Class;
import ast.Ast.Class.ClassSingle;
import ast.Ast.MainClass;
import ast.Ast.Dec;
import ast.Ast.Dec.DecSingle;
import ast.Ast.Exp;
import ast.Ast.Method;
import ast.Ast.Method.MethodSingle;
import ast.Ast.Program;
import ast.Ast.Type;
import control.Verbose;
import ast.Ast.Exp.Call;
import ast.Ast.Exp.Id;
import ast.Ast.Exp.NewObject;
import ast.Ast.Exp.T;
import ast.Ast.Exp.ArraySelect;
import ast.Ast.MainClass.MainClassSingle;
import ast.Ast.Program.ProgramSingle;
import ast.Ast.Stm.If;
import ast.Ast.Stm.Print;
import ast.Ast.Stm;
import java.util.LinkedList;



public class Parser
{
    private Type.T currentType = null;

}

PARSER_END(Parser)

SKIP:
{
    " "
    |"\r"
    |"\n"
    |"\t"
}

TOKEN:
{
    <ADD: "+">
|   <AND: "&&">
|   <ASSIGN: "=">
|   <BOOLEAN: "boolean">
|   <CLASS: "class">
|   <COMMER: ",">
|   <DOT: ".">
|   <ELSE: "else">
|   <EXTENDS: "extends">
|   <FALSE: "false">
|   <IF: "if">
|   <INT: "int">
|   <LBRACE: "{">
|   <LBRACK: "[">
|   <LENGTH: "length">
|   <LPAREN: "(">
|   <LT: "<">
|   <MAIN: "main">
|   <NEW: "new">
|   <NOT: "!">
|   <NUM: "0"|(["1"-"9"])(<DIGIT>)*>
|   <OUT: "out">
|   <PRINTLN: "println">
|   <PUBLIC: "public">
|   <RBRACE: "}">
|   <RBRACK: "]">
|   <RETURN: "return">
|   <RPAREN: ")">
|   <SEMI: ";">
|   <STATIC: "static">
|   <STRING: "String">
|   <SUB: "-">
|   <SYSTEM: "System">
|   <THIS: "this">
|   <TIMES: "*">
|   <TRUE: "true">
|   <VOID: "void">
|   <WHILE: "while">
|   <ID: (<LETTER>|"_")+(<LETTER>|<DIGIT>)*>
|   <#LETTER: ["a"-"z", "A"-"Z"]>
|   <#DIGIT:(["0"-"9"])*>
}

SPECIAL_TOKEN:
{
    <LINE_COMMENT: "//"(~["\r","\n"])*>
|   <MULTILINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}


LinkedList<Token> lexerTest():
{
    Token t;
    LinkedList<Token> tokens = new LinkedList<Token>();

}
{
   (t = <ADD> {tokens.add(t);}
    |t = <AND> {tokens.add(t);}
    |t = <ASSIGN>{tokens.add(t);}
    |t = <BOOLEAN>{tokens.add(t);}
    |t = <CLASS>{tokens.add(t);}
    |t = <COMMER>{tokens.add(t);}
    |t = <DOT>{tokens.add(t);}
    |t = <ELSE>{tokens.add(t);}
    |t = <EXTENDS>{tokens.add(t);}
    |t = <FALSE>{tokens.add(t);}
    |t = <ID>{tokens.add(t);}
    |t = <IF>{tokens.add(t);}
    |t = <INT>{tokens.add(t);}
    |t = <LBRACE>{tokens.add(t);}
    |t = <LBRACK>{tokens.add(t);}
    |t = <LPAREN>{tokens.add(t);}
    |t = <LENGTH>{tokens.add(t);}
    |t = <LT>{tokens.add(t);}
    |t = <MAIN>{tokens.add(t);}
    |t = <NEW>{tokens.add(t);}
    |t = <NOT>{tokens.add(t);}
    |t = <NUM>{tokens.add(t);}
    |t = <OUT>{tokens.add(t);}
    |t = <PRINTLN>{tokens.add(t);}
    |t = <PUBLIC>{tokens.add(t);}
    |t = <RBRACK>{tokens.add(t);}
    |t = <RBRACE>{tokens.add(t);}
    |t = <RPAREN>{tokens.add(t);}
    |t = <RETURN>{tokens.add(t);}
    |t = <SEMI>{tokens.add(t);}
    |t = <STATIC>{tokens.add(t);}
    |t = <STRING>{tokens.add(t);}
    |t = <SUB>{tokens.add(t);}
    |t = <SYSTEM>{tokens.add(t);}
    |t = <THIS>{tokens.add(t);}
    |t = <TIMES>{tokens.add(t);}
    |t = <TRUE>{tokens.add(t);}
    |t = <VOID>{tokens.add(t);}
    |t = <WHILE>{tokens.add(t);}
    )*
    <EOF>
    {return tokens;}
}


// ExpList -> Exp ExpRest*
// ->
// ExpRest -> , Exp

private LinkedList<Exp.T> parseExpList():
{
    LinkedList<Exp.T> args = new LinkedList<Exp.T>();
    Exp.T exp;
}
{
    exp = parseExp()
    {args.add(exp);}
    (
        <COMMER>
        exp = parseExp()
        {args.add(exp);}

    )*

    {return args;}
}

private Exp.T parseNewExp():
{}
{
            <LPAREN>
            {Exp.T exp;}
            exp = parseExp()
            <RPAREN>
            {return new Exp.NewIntArray(exp);}
        |
            {Token t;}
            t = <ID>
            <LPAREN>
            <RPAREN>
            {return new Exp.NewObject(t.image);}
}

// AtomExp -> (exp)
// -> INTEGER_LITERAL
// -> true
// -> false
// -> this
// -> id
// -> new int [exp]
// -> new id ()
private Exp.T parseAtomExp():
{}
{       {Exp.T exp;}
        <LPAREN>
        exp = parseExp()
        <RPAREN>
        {return exp;}
    |
        {
            Token t;
            int value;
        }
        <SUB>
        t = <NUM>
        {value = Integer.parseInt(t.image);}
        {return new Exp.Num(0-value);}
    |
        {
            Token t;
            int value;
        }
        t = <NUM>
        {value = Integer.parseInt(t.image);}
        {return new Exp.Num(value);}
    |
        <TRUE>
        {return new Exp.True();}
    |
        <FALSE>
        {return new Exp.False();}
    |
        <THIS>
        {return new Exp.This();}
    |
        {Token t;}
        t = <ID>
        {return new Exp.Id(t.image);}

    |
        <NEW>
        {return parseNewExp();}
}


private Exp.T parseDotExp(Exp.T exp):
{}
{
            <LENGTH>
            {return new Exp.Length(exp);}
        |
            {Token t;}
            t = <ID>
            <LPAREN>
            {LinkedList<Exp.T> args;}
            args = parseExpList()
            <RPAREN>
            {return new Exp.Call(exp, t.image, args);}
}

// NotExp -> AtomExp
// -> AtomExp .id (expList)
// -> AtomExp [exp]
// -> AtomExp .length
private Exp.T parseNotExp():
{
    Exp.T exp;
}
{
    exp = parseAtomExp()
    (
            <DOT>
            {return parseDotExp(exp);}
        |
            {Exp.T index;}
            <LBRACK>
            index = parseExp()
            <RBRACK>
            {return new Exp.ArraySelect(exp, index);}

    )?
    {return exp;}
}

// TimesExp -> ! TimesExp
// -> NotExp
private Exp.T parseTimesExp():
{
    Exp.T exp;
}
{
    (
        <NOT>
        exp = parseTimesExp()
        {return new Exp.Not(exp);}
    )?
    exp = parseNotExp()
    {return exp;}
}

// AddSubExp -> TimesExp * TimesExp
// -> TimesExp
private Exp.T parseAddSubExp():
{
    Exp.T left;
    Exp.T right;
}
{
    left = parseTimesExp()
    (
        <TIMES>
        right = parseTimesExp()
        {return new Exp.Times(left, right);}
    )?
    {return left;}
}


// LtExp -> AddSubExp + AddSubExp
// -> AddSubExp - AddSubExp
// -> AddSubExp
private Exp.T parseLtExp():
{
    Exp.T left;
    Exp.T right;
}
{
    left = parseAddSubExp()
    (
        <ADD>
        right = parseAddSubExp()
        {return new Exp.Add(left, right);}
    |
        <SUB>
        right = parseAddSubExp()
        {return new Exp.Sub(left, right);}
    )?
    {return left;}
}

// AndExp -> LtExp < LtExp
// -> LtExp
private Exp.T parseAndExp():
{
    Exp.T left;
    Exp.T right;
}
{
    left = parseLtExp()
    (
        <LT>
        right = parseLtExp()
        {return new Exp.Lt(left, right);}
    )?
    {return left;}
}

// Exp -> AndExp && AndExp
// -> AndExp
private Exp.T parseExp():
{
    Exp.T left;
    Exp.T right;
}
{
    left = parseAndExp()
    (
        <AND>
        right = parseAndExp()
        {return new Exp.And(left, right);}
    )?
    {return left;}
}


// Statements -> Statement Statements
// ->
private LinkedList<Stm.T> parseStatements():
{
    LinkedList<Stm.T> stms = new LinkedList<Stm.T>();
    Stm.T stm;
}
{
    (
        stm = parseStatement()
        {stms.add(stm);}
    )*
    {
        return stms;
    }
}

private Stm.T parseStmAssign(String id):
{}
{
        <ASSIGN>
        {Exp.T exp;}
        exp = parseExp()
        <SEMI>
        {return new Stm.Assign(id, exp);}
    |
        <LBRACK>
        {
            Exp.T exp;
            Exp.T index;
        }
        index = parseExp()
        <RBRACK>
        <ASSIGN>
        exp = parseExp()
        {return new Stm.AssignArray(id, index, exp);}
}
// Statement -> { Statement* }
// -> if ( Exp ) Statement else Statement
// -> while ( Exp ) Statement
// -> System.out.println ( Exp ) ;
// -> id = Exp ;
// -> id [ Exp ]= Exp ;
private Stm.T parseStatement():
{
    Stm.T stm = null;
    Token t;
}
{
        <LBRACE>
        {LinkedList<Stm.T> block;}
        block = parseStatements()
        <RBRACE>
        {return new Stm.Block(block);}
    |
        <IF>
        {
            Exp.T condition;
            Stm.T thenn;
            Stm.T elsee;
        }
        <LPAREN>
        condition = parseExp()
        <RPAREN>
        thenn = parseStatement()
        <ELSE>
        elsee = parseStatement()
        {return new Stm.If(condition, thenn, elsee);}
    |
        <WHILE>
        {
            Exp.T condition;
            Stm.T body;
        }
        <LPAREN>
        condition = parseExp()
        <RPAREN>
        body = parseStatement()
        {return new Stm.While(condition, body);}
    |
        <SYSTEM>
        <DOT>
        <OUT>
        <DOT>
        <PRINTLN>
        <LPAREN>
        {Exp.T exp;}
        exp = parseExp()
        <RPAREN>
        <SEMI>
        {return new Print(exp);}
    |
        t = <ID>
        {return parseStmAssign(t.image);}
    {return stm;}
}

private LinkedList<Class.T> parseClassDecls():
{
    LinkedList<Class.T> classes = new LinkedList<Class.T>();
}
{
    {return classes;}
}

private MainClassSingle parseMain():
{
    Token id;
    Token arg;
    Stm.T stm = null;
}
{
    <CLASS>
    id = <ID>
    <LBRACE>
    <PUBLIC>
    <STATIC>
    <VOID>
    <MAIN>
    <LPAREN>
    <STRING>
    <LBRACK>
    <RBRACK>
    arg = <ID>
    <RPAREN>
    <LBRACE>
    stm = parseStatement()
    <RBRACE>
    {return new MainClassSingle(id.image, arg.image, stm);}

}

Program.T parser():
{
    Program.T p = null;
    MainClassSingle main = null;
    LinkedList<Class.T> classes = null;
}
{
    main = parseMain()
    classes = parseClassDecls()
    {return new ProgramSingle(main, classes);}
}

