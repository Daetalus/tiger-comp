options{
    STATIC=false;
}

PARSER_BEGIN(Parser)

package  javacc;
import ast.Ast.Class;
import ast.Ast.Class.ClassSingle;
import ast.Ast.MainClass;
import ast.Ast.Dec;
import ast.Ast.Dec.DecSingle;
import ast.Ast.Exp;
import ast.Ast.Method;
import ast.Ast.Method.MethodSingle;
import ast.Ast.Program;
import ast.Ast.Type;
import control.Verbose;
import ast.Ast.Exp.Call;
import ast.Ast.Exp.Id;
import ast.Ast.Exp.NewObject;
import ast.Ast.Exp.T;
import ast.Ast.Exp.ArraySelect;
import ast.Ast.MainClass.MainClassSingle;
import ast.Ast.Program.ProgramSingle;
import ast.Ast.Stm.If;
import ast.Ast.Stm.Print;
import ast.Ast.Stm;
import java.util.LinkedList;



public class Parser
{
    Type.T currentType;
}

PARSER_END(Parser)

SKIP:
{
    " "
    |"\r"
    |"\n"
    |"\t"
}

TOKEN:
{
    <ADD: "+">
|   <AND: "&&">
|   <ASSIGN: "=">
|   <BOOLEAN: "boolean">
|   <CLASS: "class">
|   <COMMER: ",">
|   <DOT: ".">
|   <ELSE: "else">
|   <EXTENDS: "extends">
|   <FALSE: "false">
|   <IF: "if">
|   <INT: "int">
|   <LBRACE: "{">
|   <LBRACK: "[">
|   <LENGTH: "length">
|   <LPAREN: "(">
|   <LT: "<">
|   <MAIN: "main">
|   <NEW: "new">
|   <NOT: "!">
|   <NUM: "0"|(["1"-"9"])(<DIGIT>)*>
|   <OUT: "out">
|   <PRINTLN: "println">
|   <PUBLIC: "public">
|   <RBRACE: "}">
|   <RBRACK: "]">
|   <RETURN: "return">
|   <RPAREN: ")">
|   <SEMI: ";">
|   <STATIC: "static">
|   <STRING: "String">
|   <SUB: "-">
|   <SYSTEM: "System">
|   <THIS: "this">
|   <TIMES: "*">
|   <TRUE: "true">
|   <VOID: "void">
|   <WHILE: "while">
|   <ID: (<LETTER>|"_")+(<LETTER>|<DIGIT>)*>
|   <#LETTER: ["a"-"z", "A"-"Z"]>
|   <#DIGIT:(["0"-"9"])*>
}

SPECIAL_TOKEN:
{
    <LINE_COMMENT: "//"(~["\r","\n"])*>
|   <MULTILINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}


LinkedList<Token> lexerTest():
{
    Token t;
    LinkedList<Token> tokens = new LinkedList<Token>();

}
{
   (t = <ADD> {tokens.add(t);}
    |t = <AND> {tokens.add(t);}
    |t = <ASSIGN>{tokens.add(t);}
    |t = <BOOLEAN>{tokens.add(t);}
    |t = <CLASS>{tokens.add(t);}
    |t = <COMMER>{tokens.add(t);}
    |t = <DOT>{tokens.add(t);}
    |t = <ELSE>{tokens.add(t);}
    |t = <EXTENDS>{tokens.add(t);}
    |t = <FALSE>{tokens.add(t);}
    |t = <ID>{tokens.add(t);}
    |t = <IF>{tokens.add(t);}
    |t = <INT>{tokens.add(t);}
    |t = <LBRACE>{tokens.add(t);}
    |t = <LBRACK>{tokens.add(t);}
    |t = <LPAREN>{tokens.add(t);}
    |t = <LENGTH>{tokens.add(t);}
    |t = <LT>{tokens.add(t);}
    |t = <MAIN>{tokens.add(t);}
    |t = <NEW>{tokens.add(t);}
    |t = <NOT>{tokens.add(t);}
    |t = <NUM>{tokens.add(t);}
    |t = <OUT>{tokens.add(t);}
    |t = <PRINTLN>{tokens.add(t);}
    |t = <PUBLIC>{tokens.add(t);}
    |t = <RBRACK>{tokens.add(t);}
    |t = <RBRACE>{tokens.add(t);}
    |t = <RPAREN>{tokens.add(t);}
    |t = <RETURN>{tokens.add(t);}
    |t = <SEMI>{tokens.add(t);}
    |t = <STATIC>{tokens.add(t);}
    |t = <STRING>{tokens.add(t);}
    |t = <SUB>{tokens.add(t);}
    |t = <SYSTEM>{tokens.add(t);}
    |t = <THIS>{tokens.add(t);}
    |t = <TIMES>{tokens.add(t);}
    |t = <TRUE>{tokens.add(t);}
    |t = <VOID>{tokens.add(t);}
    |t = <WHILE>{tokens.add(t);}
    )*
    <EOF>
    {return tokens;}
}


// ExpList  -> Exp ExpRest*
//          ->
// ExpRest -> , Exp

LinkedList<Exp.T> parseExpList():
{
    LinkedList<Exp.T> args = new LinkedList<Exp.T>();
    Exp.T caller;
}
{
  (
    caller = parseExp()
    {args.add(caller);}
    (
        <COMMER>
        caller = parseExp()
        {args.add(caller);}

    )*
  )?

    {return args;}
}

// AtomExp  -> (caller)
//          -> INTEGER_LITERAL
//          -> true
//          -> false
//          -> this
//          -> id
//          -> new int [caller]
//          -> new id ()
Exp.T parseAtomExp():
{
    Token t;
}
{
        {Exp.T caller;}
        <LPAREN>
        caller = parseExp()
        <RPAREN>
        {return caller;}
    |
        {int value;}
        t = <NUM>
        {value = Integer.parseInt(t.image);}
        {return new Exp.Num(value, t.beginLine);}
    |
        t = <TRUE>
        {return new Exp.True(t.beginLine);}
    |
        t= <FALSE>
        {return new Exp.False(t.beginLine);}
    |
        t = <THIS>
        {return new Exp.This(t.beginLine);}
    |
        t = <ID>
        {return new Exp.Id(t.image, currentType, false, t.beginLine);}

    |
        <NEW>
        (
            <LPAREN>
            {Exp.T caller;}
            caller = parseExp()
            t = <RPAREN>
            {return new Exp.NewIntArray(caller, t.beginLine);}
        |
            t = <ID>
            <LPAREN>
            <RPAREN>
            {return new Exp.NewObject(t.image, t.beginLine);}
        )
}


// NotExp   -> AtomExp
//          -> AtomExp .id (expList)
//          -> AtomExp [caller]
//          -> AtomExp .length
Exp.T parseNotExp():
{
    Exp.T caller;
    Token t;
}
{
    caller = parseAtomExp()
    (
            <DOT>
            (
                t = <LENGTH>
                {return new Exp.Length(caller, t.beginLine);}
            |
                t = <ID>
                <LPAREN>
                {LinkedList<Exp.T> args;}
                args = parseExpList()
                <RPAREN>
                {return new Exp.Call(caller, t.image, args, t.beginLine);}
            )
            //{return parseDotExp(caller);}
        |
            {Exp.T index;}
            <LBRACK>
            index = parseExp()
            <RBRACK>
            {return new Exp.ArraySelect(caller, index, index.linenum);}

    )?
    {return caller;}
}

// TimesExp -> ! TimesExp
//          -> NotExp
Exp.T parseTimesExp():
{
    Exp.T caller;
}
{
    (
        <NOT>
        caller = parseTimesExp()
        {return new Exp.Not(caller, caller.linenum);}
    )?
    caller = parseNotExp()
    {return caller;}
}

// AddSubExp    -> TimesExp * TimesExp
//              -> TimesExp
Exp.T parseAddSubExp():
{
    Exp.T left;
    Exp.T right;
}
{
    left = parseTimesExp()
    (
        <TIMES>
        right = parseTimesExp()
        {return new Exp.Times(left, right, right.linenum);}
    )?
    {return left;}
}


// LtExp    -> AddSubExp + AddSubExp
//          -> AddSubExp - AddSubExp
//          -> AddSubExp
Exp.T parseLtExp():
{
    Exp.T left;
    Exp.T right;
}
{
    left = parseAddSubExp()
    (
        <ADD>
        right = parseAddSubExp()
        {return new Exp.Add(left, right, right.linenum);}
    |
        <SUB>
        right = parseAddSubExp()
        {return new Exp.Sub(left, right, right.linenum);}
    )?
    {return left;}
}

// AndExp   -> LtExp < LtExp
//          -> LtExp
Exp.T parseAndExp():
{
    Exp.T left;
    Exp.T right;
}
{
    left = parseLtExp()
    (
        <LT>
        right = parseLtExp()
        {return new Exp.Lt(left, right, right.linenum);}
    )?
    {return left;}
}

// Exp  -> AndExp && AndExp
//      -> AndExp
Exp.T parseExp():
{
    Exp.T left;
    Exp.T right;
}
{
    left = parseAndExp()
    (
        <AND>
        right = parseAndExp()
        {return new Exp.And(left, right);}
    )?
    {return left;}
}


// Statements   -> Statement Statements
//              ->
LinkedList<Stm.T> parseStatements():
{
    LinkedList<Stm.T> stms = new LinkedList<Stm.T>();
    Stm.T stm;
}
{
    (
        stm = parseStatement()
        {stms.add(stm);}
    )*
    {return stms;}
}


// Statement    -> { Statement* }
//              -> if ( Exp ) Statement else Statement
//              -> while ( Exp ) Statement
//              -> System.out.println ( Exp ) ;
//              -> id = Exp ;
//              -> id [ Exp ]= Exp ;
Stm.T parseStatement():
{
    Stm.T stm = null;
    Token t;
}
{
        <LBRACE>
        {LinkedList<Stm.T> block;}
        block = parseStatements()
        t = <RBRACE>
        {return new Stm.Block(block, t.beginLine);}
    |
        t = <IF>
        {
            Exp.T condition;
            Stm.T thenn;
            Stm.T elsee;
        }
        <LPAREN>
        condition = parseExp()
        <RPAREN>
        thenn = parseStatement()
        <ELSE>
        elsee = parseStatement()
        {return new Stm.If(condition, thenn, elsee, t.beginLine);}
    |
        t = <WHILE>
        {
            Exp.T condition;
            Stm.T body;
        }
        <LPAREN>
        condition = parseExp()
        <RPAREN>
        body = parseStatement()
        {return new Stm.While(condition, body, t.beginLine);}
    |
        t = <SYSTEM>
        <DOT>
        <OUT>
        <DOT>
        <PRINTLN>
        <LPAREN>
        {Exp.T caller;}
        caller = parseExp()
        <RPAREN>
        <SEMI>
        {return new Print(caller, t.beginLine);}
    |
        t = <ID>
        (
            <ASSIGN>
            {Exp.T caller;}
            caller = parseExp()
            <SEMI>
            {return new Stm.Assign(t.image, caller, t.beginLine);}
        |
            t = <LBRACK>
            {
                Exp.T caller;
                Exp.T index;
            }
            index = parseExp()
            <RBRACK>
            <ASSIGN>
            caller = parseExp()
            {return new Stm.AssignArray(t.image, index, caller, t.beginLine);}
        )
    {return stm;}
}

// Type -> int []
//      -> boolean
//      -> int
//      -> id
Type.T parseType():
{
    Token t;
}
{
        <INT>
        (   
            <LBRACK>
            <RBRACK>
            {this.currentType = new Type.IntArray();}
            {return this.currentType;}
          |
            {
                this.currentType =  new Type.Int();
                return this.currentType;
            }
        )
    |
        <BOOLEAN>
        {
            this.currentType = new Type.Boolean();
            return this.currentType;
        }
    |
        t = <ID>
        {
            this.currentType =  new Type.ClassType(t.image);
            return this.currentType;
        }

}

Dec.T parseVarDecl(boolean isField):
{
    Token t;
    Type.T type;
}
{
    type = parseType()
    t = <ID>
    <SEMI>
    {return new DecSingle(type, t.image, isField);}
}

// VarDecls -> VarDecl VarDecls
//          ->
LinkedList<Dec.T> parseVarDecls(boolean isField):
{
    LinkedList<Dec.T> decls = new LinkedList<Dec.T>();
    Dec.T decl;
}
{
    (
        LOOKAHEAD(parseVarDecl())
        decl = parseVarDecl(isField)
        {decls.add(decl);}
    )*
    {return decls;}
}


// FormalList -> Type id FormalRest*
//            ->
// FormalRest -> , Type id
LinkedList<Dec.T> parseFormalList():
{
    LinkedList<Dec.T> formals = new LinkedList<Dec.T>();
    Token t;
    Type.T type;
}
{
    (
        type = parseType()
        t = <ID>
        {formals.add(new DecSingle(type, t.image, false));}
        (
            <COMMER>
            type = parseType()
            t = <ID>
            {formals.add(new DecSingle(type, t.image, false));}
        )*
    )?
    {return formals;}
}

// Method -> public Type id ( FormalList )
//           { VarDecl* Statement* return Exp ;}
Method.T parseMethodDecl():
{
    Token t;
    Type.T retType;
    String id;
    LinkedList<Dec.T> formals;
    LinkedList<Dec.T> locals;
    LinkedList<Stm.T> stms;
    Exp.T retExp;
}
{
    <PUBLIC>
    retType = parseType()
    t = <ID>
    {id = t.image;}
    <LPAREN>
    formals = parseFormalList()
    <RPAREN>
    <LBRACE>
    locals = parseVarDecls(false)
    stms = parseStatements()
    <RETURN>
    retExp = parseExp()
    <SEMI>
    <RBRACE>
    {return new MethodSingle(retType, id, formals, locals, stms, retExp);}
}


// MethodDecls  -> MethodDecl MethodDecls
//              ->
LinkedList<Method.T> parseMethodDecls():
 {
    LinkedList<Method.T> methods = new LinkedList<Method.T>();
    Method.T m;
 }
 {
    (
        m = parseMethodDecl() 
        {methods.add(m);}
    )*
    {return methods;}
 }


// ClassDecl -> class id { VarDecl* MethodDecl* }
//           -> class id extends id { VarDecl* MethodDecl* }
Class.T parseClassDecl():
{
    String e = null;
    String id = null;
    Token t;
    LinkedList<Dec.T> decls;
    LinkedList<Method.T> methods;
}
{
    <CLASS>
    t = <ID>
    {id = t.image;}
    (
        <EXTENDS>
        t = <ID>
        {e = t.image;}
    )?
    <LBRACE>
    decls= parseVarDecls(true)
    methods = parseMethodDecls()
    <RBRACE>
    {return new ClassSingle(id, e, decls, methods);}
}

// ClassDecls   -> ClassDecl ClassDecls
//              ->
LinkedList<Class.T> parseClassDecls():
{
    LinkedList<Class.T> classes = new LinkedList<Class.T>();
    Class.T c;
}
{
    (
        c = parseClassDecl()
        {classes.add(c);}
    )*
    {return classes;}
}

MainClassSingle parseMain():
{
    Token id;
    Token arg;
    Stm.T stm;
}
{
    <CLASS>
    id = <ID>
    <LBRACE>
    <PUBLIC>
    <STATIC>
    <VOID>
    <MAIN>
    <LPAREN>
    <STRING>
    <LBRACK>
    <RBRACK>
    arg = <ID>
    <RPAREN>
    <LBRACE>
    stm = parseStatement()
    <RBRACE>
    <RBRACE>
    {return new MainClassSingle(id.image, arg.image, stm);}

}

public Program.T parser():
{
    Program.T p;
    MainClassSingle main;
    LinkedList<Class.T> classes;
}
{
    main = parseMain()
    classes = parseClassDecls()
    <EOF>
    {return new ProgramSingle(main, classes);}
}

